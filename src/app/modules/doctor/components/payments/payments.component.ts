import { Component } from '@angular/core'
import JsPDF from 'jspdf'
import { FormsModule } from '@angular/forms'
import { NgClass, NgIf, CurrencyPipe, NgForOf } from '@angular/common'

@Component({
  selector: 'app-payments',
  imports: [
    FormsModule,
    NgIf,
    NgClass,
    CurrencyPipe,
    NgForOf,
    // Explicitly import CurrencyPipe
  ],
  templateUrl: './payments.component.html',
})
export class PaymentsComponent {
  payments: {
    id: string
    patientName: string
    date: string
    amount: number
    currency: string
    status: string
    method: string
    notes?: string
  }[] = [
    {
      id: 'P001',
      patientName: 'John Doe',
      date: '2024-12-01',
      amount: 150,
      currency: 'USD',
      status: 'Paid',
      method: 'Credit Card',
    },
    {
      id: 'P002',
      patientName: 'Jane Smith',
      date: '2024-11-01',
      amount: 200,
      currency: 'EUR',
      status: 'Pending',
      method: 'Insurance',
    },
  ]

  showForm = false
  searchQuery = ''
  filterStatus = ''
  newPayment = {
    id: '',
    patientName: '',
    date: '',
    amount: 0,
    currency: 'USD',
    status: 'Pending',
    method: 'Credit Card',
    notes: '',
  }

  get filteredPayments() {
    return this.payments.filter((payment) => {
      const matchesSearch =
        !this.searchQuery ||
        payment.patientName
          .toLowerCase()
          .includes(this.searchQuery.toLowerCase()) ||
        payment.id.toLowerCase().includes(this.searchQuery.toLowerCase())
      const matchesStatus =
        !this.filterStatus || payment.status === this.filterStatus
      return matchesSearch && matchesStatus
    })
  }

  openForm(): void {
    this.showForm = true
    this.newPayment = {
      id: '',
      patientName: '',
      date: '',
      amount: 0,
      currency: 'USD',
      status: 'Pending',
      method: 'Credit Card',
      notes: '',
    }
  }

  closeForm(): void {
    this.showForm = false
  }

  addPayment(): void {
    this.newPayment.id = this.generateUniqueId()
    this.payments.push({ ...this.newPayment })
    this.closeForm()
  }

  generateUniqueId(): string {
    return 'P' + Math.random().toString(36).substr(2, 4).toUpperCase()
  }

  async generatePaymentReport(payment: any): Promise<void> {
    const doc = new JsPDF()

    // Add hospital logo
    const logoUrl = '/assets/logo.png' // Update with the correct path to your logo
    const logoBase64 = await this.convertToBase64(logoUrl)
    doc.addImage(logoBase64, 'PNG', 10, 10, 20, 20)

    // Add title
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    doc.text('Payment Report', 105, 30, { align: 'center' })

    // Payment details
    doc.setFontSize(12)
    doc.setFont('helvetica', 'normal')
    doc.text(`Payment ID: ${payment.id}`, 10, 50)
    doc.text(`Patient Name: ${payment.patientName}`, 10, 60)
    doc.text(`Date: ${payment.date}`, 10, 70)
    doc.text(`Amount: ${payment.amount.toFixed(2)} ${payment.currency}`, 10, 80)
    doc.text(`Status: ${payment.status}`, 10, 90)
    doc.text(`Method: ${payment.method}`, 10, 100)
    if (payment.notes) {
      doc.text(`Notes: ${payment.notes}`, 10, 110)
    }

    // Footer
    doc.setFontSize(10)
    doc.text('Generated by Advanced Medical Data', 10, 280)
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 180, 280)

    // Save the PDF
    doc.save(`Payment_Report_${payment.id}.pdf`)
  }

  private convertToBase64(url: string): Promise<string> {
    return new Promise((resolve, reject) => {
      const img = new Image()
      img.crossOrigin = 'Anonymous'
      img.src = url
      img.onload = () => {
        const canvas = document.createElement('canvas')
        canvas.width = img.width
        canvas.height = img.height
        const ctx = canvas.getContext('2d')
        ctx?.drawImage(img, 0, 0)
        resolve(canvas.toDataURL('image/png'))
      }
      img.onerror = (error) => reject(error)
    })
  }
}
